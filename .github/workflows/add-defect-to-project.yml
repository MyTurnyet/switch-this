name: Add Defect to Project

on:
  issues:
    types:
      - opened
      - labeled

jobs:
  add-to-project:
    name: Add defect to project
    runs-on: ubuntu-latest
    steps:
      - name: Get Issue Details
        id: issue-details
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const hasDefectLabel = issue.labels.some(label => 
              label.name.toLowerCase().includes('bug') || 
              label.name.toLowerCase().includes('defect'));
            
            // Modify this line to set label requirement
            const shouldProcess = hasDefectLabel || context.payload.action === 'opened';

            core.setOutput('issue-title', issue.title);
            core.setOutput('issue-body', issue.body);
            core.setOutput('should-process', shouldProcess.toString());
            core.setOutput('issue-url', issue.html_url);
            core.setOutput('issue-number', issue.number.toString());
            core.setOutput('has-defect-label', hasDefectLabel.toString());

      - name: Add defect label if missing
        if: ${{ steps.issue-details.outputs.has-defect-label == 'false' && steps.issue-details.outputs.should-process == 'true' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['defect']
            });

      - name: Add issue to project
        if: ${{ steps.issue-details.outputs.should-process == 'true' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}
          script: |
            // Replace with actual project number after creating it
            const PROJECT_NUMBER = 1; 
            
            // Get project ID
            const findProjectId = async () => {
              const query = `
                query { 
                  organization(login: "${context.repo.owner}") {
                    projectV2(number: ${PROJECT_NUMBER}) {
                      id
                    }
                  }
                }
              `;
              
              const result = await github.graphql(query);
              return result.organization.projectV2.id;
            };
            
            // Add issue to project
            const addIssueToProject = async (projectId, issueNodeId) => {
              const mutation = `
                mutation {
                  addProjectV2ItemById(input: {
                    projectId: "${projectId}"
                    contentId: "${issueNodeId}"
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              return github.graphql(mutation);
            };
            
            try {
              // Get the issue node ID
              const issueData = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              
              const issueNodeId = issueData.data.node_id;
              const projectId = await findProjectId();
              
              console.log(`Adding issue #${context.payload.issue.number} to project...`);
              await addIssueToProject(projectId, issueNodeId);
              console.log('Issue successfully added to project!');
            } catch (error) {
              console.error('Error adding issue to project:');
              console.error(error);
              core.setFailed(error.message);
            }

      - name: Add comment to issue
        if: ${{ steps.issue-details.outputs.should-process == 'true' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: 'This issue has been identified as a defect and has been added to our defect tracking project. The team will review it shortly.'
            }); 